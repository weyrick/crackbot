## crack irc bot
## Copyright 2012 Shannon Weyrick <weyrick@mozek.us>

import crack.time TimeDelta;
import lib.irc Client, User, Channel;
import crack.net.httpsrv HTTPServer, HTTPRequest;
import crack.io cout, StringFormatter, FStr;
import crack.lang die;
import crack.functor Function1;

class CrackBot: Client {

    oper init(String s, uint p, String n, String un, String rn):
      Client(s,p,n,un,rn) {

        _debug = true;

    }

    void _onConnect() {
        join("#crack-lang");
        //join("#crack-lang-test");
    }

    void _onJoin(User user, Channel channel) {
        say(channel.name, FStr() `yo $(user.nick), whatchu need?`);
    }

}

bot := CrackBot("irc.roadsend.com", 6667, 'crack|','crackbot','http://crack-lang.org');
//bot := CrackBot("irc.freenode.net", 6667, 'crack|','crackbot','http://crack-lang.org');

if (!bot.connect())
    die("unable to connect");

s := HTTPServer(8080);

String botStatusPage() {
    result := StringFormatter();
    result `Connected to: $(bot.getServerName())`;
    return result.makeString();
}

bool handler(HTTPRequest req) {
    if (req.path == '/') {
        if (bot.isConnected()) {
            req.sendReply(200, 'text/plain', botStatusPage());
        }
        else
            req.sendReply(200, 'text/plain', 'IRC not connected');
        return true;
    } else {
        return false;
    }
}

bool notFound(HTTPRequest req) {
  req.sendReply(404, 'text/plain', 'Not found.');
  return true;
}

s.addHandler(Function1[bool, HTTPRequest](handler));
s.addHandler(Function1[bool, HTTPRequest](notFound));

while (true) {
    // process irc
    bot.processOnce(TimeDelta(1,0));
    // process http
    s.processOnce(TimeDelta(1,0));
}

